package com.linford.vip.springpattern.springDecorator.test;

import java.io.DataInputStream;
import java.io.FilterInputStream;
import java.io.InputStream;

/**
 * 装饰器 模式
 */
public class DecoratorTest {
    /*
    ==========================================================================================
    装饰器模式                               /   适配器模式
    -----------------------------------------------------------------------------------------
    是一种非常特别的适配器模式               /   可以不保留层级关系
    ------------------------------------------------------------------------------------------
    装饰者和被装饰者都要实现同一个接口       /   通常适配者和被适配者没有必然的层级关系
    主要是为了扩展，依旧保留oop关系          /    通常采用代理或继承形式进行包装
    --------------------------------------------------------------------------------------------
    满足is-a的关系                          /    满足has-a
    ------------------------------------------------------------------------------------------
    注重的是覆盖，扩展                       /   注重兼容，转换
    ===========================================================================================
     */

    public static void main(String[] args) {
        //为了某个实现类在不修改原始类的基础上进行动态的覆盖或增加方法
        //该实现保持跟原有类的层级关系
        //采用装饰器模式
        //装饰器模式实际上是一种非常特殊的适配器模式
        //穷举：DataInputStream
        //DataInputStream 同样要实现InputStream
        InputStream in=null;
        FilterInputStream fis=new DataInputStream(in);

    }
}
